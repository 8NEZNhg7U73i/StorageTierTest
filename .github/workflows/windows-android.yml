name: test

on:
  push:
    branches: master

jobs:
  build:
    runs-on: windows-2019

    steps:
      - name: create report text
        shell: powershell
        run: New-Item C:\c.report.txt

      - name: create vdisk
        if: github.event_name == 'rase'
        shell: cmd
        run: |
          echo rem > disk
          echo create vdisk file=C:\C.vhd maximum=87040 type=EXPANDABLE >> disk
          echo attach vdisk >> disk
          echo create vdisk file=D:\D.vhd maximum=10240 type=EXPANDABLE >> disk
          echo attach vdisk >> disk
          diskpart /s disk

      - name: install vhd module
        #if: github.event_name == 'rase'
        shell: powershell
        run: |
          Install-Module WindowsImageTools -force

      - name: create vdisk
        #if: github.event_name == 'rase'
        shell: powershell
        run: |
          $HDDSize = (get-volume -driveletter c).sizeremaining
          $SSDSize = (get-volume -driveletter d).sizeremaining
          $HDDUsableSpace = 0.99
          $SSDUsableSpace = 0.99
          $HDDSize = [int64]( ( $HDDSize * $HDDUsableSpace ) - ( $HDDSize * $HDDUsableSpace % 2147483648 ) )
          $SSDSize = [int64]( ( $SSDSize * $SSDUsableSpace ) - ( $SSDSize * $SSDUsableSpace % 2147483648 ) )
          new-datavhd -path C:\C.vhd -size $HDDSize -dynamic -Confirm:$false -force
          new-datavhd -path D:\D.vhd -size $SSDSize -dynamic -Confirm:$false -force
          get-disk -number $($(Mount-DiskImage -ImagePath C:\C.vhd).number) | Clear-Disk -RemoveData -RemoveOEM -Confirm:$false
          get-disk -number $($(Mount-DiskImage -ImagePath D:\D.vhd).number) | Clear-Disk -RemoveData -RemoveOEM -Confirm:$false
          Write-Output "DiskSize: ( $HDDSize , $SSDSize )" | Tee-Object $temp
          $temp >> C:\report.txt


      - name: create pool
        shell: powershell
        run: |
          $WriteCacheSpace = 0.5
          $SSDTierSpace = 0.95
          $HDDTierSpace = 0.95
          $SSDTierReseverDivisorBlock = 4
          $HDDTierReseverDivisorBlock = 4
          $hdd = get-physicaldisk | where physicallocation -eq "C:\C.vhd"
          $ssd = get-physicaldisk | where physicallocation -eq "D:\D.vhd"
          $hddphy = $hdd | get-disk
          $ssdphy = $ssd | get-disk
          $hdd | Reset-PhysicalDisk
          $ssd | Reset-PhysicalDisk
          Write-Output "Create StoragePool"
          $hdd = get-physicaldisk | where physicallocation -eq "C:\C.vhd"
          $ssd = get-physicaldisk | where physicallocation -eq "D:\D.vhd"
          #$vg = New-StoragePool -PhysicalDisks @($hdd , $ssd) -StorageSubSystemFriendlyName (Get-StorageSubSystem).FriendlyName -FriendlyName vg 
          #-ResiliencySettingName Simple
          $vg = New-StoragePool -FriendlyName vg -PhysicalDisks @($hdd , $ssd) -StorageSubSystemFriendlyName (Get-StorageSubSystem).FriendlyName #-WriteCacheSizeDefault 0
          # -ResiliencySettingName Simple
          $hdd | Set-PhysicalDisk -MediaType HDD
          $ssd | Set-PhysicalDisk -MediaType SSD
          $SSDTier = New-StorageTier -StoragePoolFriendlyName vg -FriendlyName SSDTier -MediaType SSD -ResiliencySettingName Simple
          $HDDTier = New-StorageTier -StoragePoolFriendlyName vg -FriendlyName HDDTier -MediaType HDD -ResiliencySettingName Simple
          $SSDTierSupportedSize = $SSDTier | Get-StorageTierSupportedSize
          $HDDTierSupportedSize = $HDDTier | Get-StorageTierSupportedSize
          $SSDTierDivisorBlockMax = [int64][math]::Round( $($SSDTierSupportedSize.TierSizeMax) / $($SSDTierSupportedSize.TierSizeDivisor) , [MidpointRounding]::ToNegativeInfinity )
          $HDDTierDivisorBlockMax = [int64][math]::Round( $($HDDTierSupportedSize.TierSizeMax) / $($HDDTierSupportedSize.TierSizeDivisor) , [MidpointRounding]::ToNegativeInfinity )
          #$SSDTierSize = [int64]( $($SSDTierSupportedSize.TierSizeMax) * $SSDTierSpace - $($SSDTierSupportedSize.TierSizeMax) * $SSDTierSpace % $($SSDTierSupportedSize.TierSizeDivisor) )
          #$HDDTierSize = [int64]( $($HDDTierSupportedSize.TierSizeMax) * $HDDTierSpace - $($HDDTierSupportedSize.TierSizeMax) * $HDDTierSpace % $($HDDTierSupportedSize.TierSizeDivisor) )
          $SSDTierDivisorBlock = ($SSDTierDivisorBlockMax - $SSDTierReseverDivisorBlock)
          $HDDTierDivisorBlock = ($HDDTierDivisorBlockMax - $HDDTierReseverDivisorBlock)
          $SSDTierSize = [int64]( $SSDTierDivisorBlock * $($SSDTierSupportedSize.TierSizeDivisor) )
          $HDDTierSize = [int64]( $HDDTierDivisorBlock * $($HDDTierSupportedSize.TierSizeDivisor) )
          #$SSDAllocated = [int64]$($ssd.allocatedsize)
          #$HDDAllocated = [int64]$($hdd.allocatedsize)
          $SSDRemain = [int64]( $($ssd.size) - $($ssd.allocatedsize) )
          $HDDRemain = [int64]( $($hdd.size) - $($hdd.allocatedsize) )
          $WriteCacheSize = [int64]( $($SSDTierSupportedSize.TierSizeMax) * $WriteCacheSpace )
          Write-Output "DivisorSizes: ( $($SSDTierSupportedSize.TierSizeDivisor), $($HDDTierSupportedSize.TierSizeDivisor) )"  | Tee-Object $temp
          $temp >> C:\report.txt
          Write-Output "TierSizeMax: ( $($SSDTierSupportedSize.TierSizeMax) , $($HDDTierSupportedSize.TierSizeMax) )" | Tee-Object $temp
          $temp >> C:\report.txt
          #Write-Output "TierSizeMin: ( $($SSDTierSupportedSize.TierSizeMin) , $($HDDTierSupportedSize.TierSizeMin) )" | Tee-Object $temp
          #$temp >> C:\report.txt
          Write-Output "TierDivisorBlockMax: ( $SSDTierDivisorBlockMax , $HDDTierDivisorBlockMax )" | Tee-Object $temp
          $temp >> C:\report.txt
          Write-Output "TierDivisorBlock: ( $SSDTierDivisorBlock , $HDDTierDivisorBlock )" | Tee-Object $temp
          $temp >> C:\report.txt
          Write-Output "TierReseverDivisorBlock: ( $SSDTierReseverDivisorBlock , $HDDTierReseverDivisorBlock )" | Tee-Object $temp
          $temp >> C:\report.txt
          Write-Output "TierSizes: ( $SSDTierSize , $HDDTierSize )" | Tee-Object $temp
          $temp >> C:\report.txt
          Write-Output "DiskRemain: ( $SSDRemain , $HDDRemain )" | Tee-Object $temp
          $temp >> C:\report.txt
          Write-Output "DiskAllocated: ( $($ssd.allocatedsize) , $($hdd.allocatedsize) )" | Tee-Object $temp
          $temp >> C:\report.txt
          Write-Output "Create Virtualdisk"
          echo Create Virtualdisk >> C:\report.txt
          $lv = $( New-VirtualDisk -StoragePoolFriendlyName vg -FriendlyName lv -StorageTiers @($SSDTier , $HDDTier) -StorageTierSizes @($SSDTierSize , $HDDTierSize) -ResiliencySettingName Simple -WriteCacheSize 0)
          # -WriteCacheSize $WriteCacheSize
          if ($lv -ne $null) {
            $hdd = get-physicaldisk | where physicallocation -eq "C:\C.vhd"
            $ssd = get-physicaldisk | where physicallocation -eq "D:\D.vhd"
            $SSDRemain = [int64]( $($ssd.size) - $($ssd.allocatedsize) )
            $HDDRemain = [int64]( $($hdd.size) - $($hdd.allocatedsize) )
            Write-Output "DiskRemain: ( $SSDRemain, $HDDRemain )" | Tee-Object $temp
            $temp >> C:\report.txt
            Write-Output "DiskAllocated: ( $($ssd.allocatedsize) , $($hdd.allocatedsize) )" | Tee-Object $temp
            $temp >> C:\report.txt
            Get-VirtualDisk lv | Get-Disk | Initialize-Disk -PartitionStyle MBR -PassThru | New-Partition -DriveLetter Z -UseMaximumSize | out-null
            Initialize-Volume -DriveLetter Z -FileSystem NTFS -Confirm:$false -NewFileSystemLabel TieredVolume | out-null
            #Get-Volume -DriveLetter Z
          }

      - name: list something
        shell: powershell
        run: |
          get-disk
          get-physicalDisk
          get-partition
          get-volume

      - uses: actions/checkout@v2

      - name: Download everything
        shell: powershell
        run: |
          wget https://www.voidtools.com/Everything-1.4.1.1015.x64.en-US.zip -outfile Everything-1.4.1.1015.x64.en-US.zip
          wget https://www.voidtools.com/ES-1.1.0.23.zip -outfile ES-1.1.0.23.zip
          wget https://www.voidtools.com/Everything-1.4.1.1015.x64.en-US.zip -outfile C:\users\runneradmin\Everything-1.4.1.1015.x64.en-US.zip
          wget https://www.voidtools.com/ES-1.1.0.23.zip -outfile C:\users\runneradmin\ES-1.1.0.23.zip

      - name: Unzip everything
        shell: cmd
        run: |
          unzip Everything-1.4.1.1015.x64.en-US.zip
          unzip ES-1.1.0.23.zip
      
      - name: Send Report
        uses: softprops/action-gh-release@v1
        if: ${{ failure() }}
        with:
          files: C:\report.txt
          tag_name: ${{ github.sha }}
          body_path: C:\Release.txt

      - name: Send Report
        uses: softprops/action-gh-release@v1
        with:
          files: C:\report.txt
          tag_name: ${{ github.sha }}
          body_path: C:\Release.txt

      - name: Start SSH session
        uses: luchihoratiu/debug-via-ssh@main
        #if: ${{ failure() }}
        if: github.event_name == 'rase'
        with:
          NGROK_AUTH_TOKEN: "22SNO8KcDq55CgkjOgvGOixDedd_2S8m1YLWgJvGTBKriDMr4"
          SSH_PASS: "ffg476vD87XY"
