name: test

on:
  push:
    branches: master

jobs:
  build:
    runs-on: windows-2019

    steps:
      - name: create vdisk
        if: github.event_name == 'rase'
        shell: cmd
        run: |
          echo rem > disk
          echo create vdisk file=c:\c.vhd maximum=87040 type=EXPANDABLE >> disk
          echo attach vdisk >> disk
          echo create vdisk file=d:\d.vhd maximum=10240 type=EXPANDABLE >> disk
          echo attach vdisk >> disk
          diskpart /s disk

      - name: install vhd module
        #if: github.event_name == 'rase'
        shell: powershell
        run: |
          Install-Module WindowsImageTools -force

      - name: create vdisk
        shell: powershell
        run: |
          $HDDSize = (get-volume -driveletter c).sizeremaining
          $SSDSize = (get-volume -driveletter d).sizeremaining
          $HDDUsableSpace = 0.98
          $SSDUsableSpace = 0.98
          $HDDSize = [int64]( ( $HDDSize * $HDDUsableSpace ) - ( $HDDSize * $HDDUsableSpace % 512 ) )
          $SSDSize = [int64]( ( $SSDSize * $SSDUsableSpace ) - ( $SSDSize * $SSDUsableSpace % 512 ) )
          new-datavhd -path c:\c.vhd -size $HDDSize -dynamic
          new-datavhd -path d:\d.vhd -size $SSDSize -dynamic
          mount-diskimage c:\c.vhd
          mount-diskimage d:\d.vhd
          $hdd = get-physicaldisk | where physicallocation -eq "c:\c.vhd"
          $ssd = get-physicaldisk | where physicallocation -eq "d:\d.vhd"
          $hddphy = $hdd | get-disk
          $ssdphy = $ssd | get-disk
          $hddphy | get-disk | where partitionstyle -ne raw | clear-disk -RemoveData -confirm:$false
          $ssdphy | get-disk | where partitionstyle -ne raw | clear-disk -RemoveData -confirm:$false          

      - name: create pool
        shell: powershell
        run: |
          $WriteCacheSpace = 0.5
          $SSDTierSpace = 0.95
          $HDDTierSpace = 0.95
          $SSDTierReseverDivisorBlock = 4
          $HDDTierReseverDivisorBlock = 4
          $hdd = get-physicaldisk | where physicallocation -eq "c:\c.vhd"
          $ssd = get-physicaldisk | where physicallocation -eq "d:\d.vhd"
          $hddphy = $hdd | get-disk
          $ssdphy = $ssd | get-disk
          $hdd | Set-PhysicalDisk -MediaType HDD
          $ssd | Set-PhysicalDisk -MediaType SSD
          #New-StoragePool -PhysicalDisks @($hdd , $ssd) -StorageSubSystemFriendlyName (Get-StorageSubSystem).FriendlyName -FriendlyName vg
          New-StoragePool -FriendlyName vg -PhysicalDisks @($hdd , $ssd) -AutoWriteCacheSize $False -EnclosureAwareDefault $False -ProvisioningTypeDefault Fixed -StorageSubSystemFriendlyName (Get-StorageSubSystem).FriendlyName
          $SSDTier = New-StorageTier -StoragePoolFriendlyName vg -FriendlyName SSDTier -MediaType SSD
          $HDDTier = New-StorageTier -StoragePoolFriendlyName vg -FriendlyName HDDTier -MediaType HDD
          $SSDTierDivisor = ($SSDTier | Get-StorageTierSupportedSize -ResiliencySettingName Simple).TierSizeDivisor
          $HDDTierDivisor = ($HDDTier | Get-StorageTierSupportedSize -ResiliencySettingName Simple).TierSizeDivisor
          $SSDTierSizeMax = ($SSDTier | Get-StorageTierSupportedSize -ResiliencySettingName Simple).TierSizeMax
          $HDDTierSizeMax = ($HDDTier | Get-StorageTierSupportedSize -ResiliencySettingName Simple).TierSizeMax
          $SSDTierDivisorBlockMax = [int64][math]::Round( $SSDTierSizeMax / $SSDTierDivisor , [MidpointRounding]::ToNegativeInfinity )
          $HDDTierDivisorBlockMax = [int64][math]::Round( $HDDTierSizeMax / $HDDTierDivisor , [MidpointRounding]::ToNegativeInfinity )
          #$SSDTierSize = [int64]( $SSDTierSizeMax * $SSDTierSpace - $SSDTierSizeMax * $SSDTierSpace % $SSDTierDivisor )
          #$HDDTierSize = [int64]( $HDDTierSizeMax * $HDDTierSpace - $HDDTierSizeMax * $HDDTierSpace % $HDDTierDivisor )
          $SSDTierSize = [int64]( ($SSDTierDivisorBlockMax - $SSDTierReseverDivisorBlock) * $SSDTierDivisor)
          $HDDTierSize = [int64]( ($HDDTierDivisorBlockMax - $HDDTierReseverDivisorBlock) * $HDDTierDivisor)
          write-output "DiskDivisorSizes: ( $SSDTierDivisor, $HDDTierDivisor )"
          write-output "DiskTierSizeMax: ( $SSDTierSizeMax , $HDDTierSizeMax )"
          write-output "DiskTierDivisorBlockMax: ( $SSDTierDivisorBlockMax , $HDDTierDivisorBlockMax )"
          Write-Output "TierSizes: ( $SSDTierSize , $HDDTierSize )"
          $SSDSize = [int64]($ssd | get-physicaldisk | select size).size
          $HDDSize = [int64]($hdd | get-physicaldisk | select size).size
          $SSDRemain = [int64]( ($ssd | get-physicaldisk | select size).size - ($ssd | get-physicaldisk | select allocatedsize).allocatedsize)
          $HDDRemain = [int64]( ($hdd | get-physicaldisk | select size).size - ($hdd | get-physicaldisk | select allocatedsize).allocatedsize)
          #$WriteCacheSize = [int64]($SSDTierSize * $WriteCacheSpace)
          write-output "DiskRemain: ( $SSDRemain , $HDDRemain )"
          New-VirtualDisk -StoragePoolFriendlyName vg -FriendlyName lv -StorageTiers @($SSDTier , $HDDTier) -StorageTierSizes @($SSDTierSize , $HDDTierSize) -ResiliencySettingName Simple
          # -WriteCacheSize $WriteCacheSize
          $lv = get-virtualdisk lv
          if ($lv -ne $null) {
          $SSDRemain = [int64]( ($ssd | get-physicaldisk | select size).size - ($ssd | get-physicaldisk | select allocatedsize).allocatedsize)
          $HDDRemain = [int64]( ($hdd | get-physicaldisk | select size).size - ($hdd | get-physicaldisk | select allocatedsize).allocatedsize)
          write-output "DiskRemain: ( $SSDRemain, $HDDRemain )"
          Get-VirtualDisk lv | Get-Disk | Initialize-Disk -PartitionStyle MBR
          Get-VirtualDisk lv | Get-Disk | New-Partition -DriveLetter Z -UseMaximumSize
          Initialize-Volume -DriveLetter Z -FileSystem NTFS -Confirm:$false -NewFileSystemLabel TieredVolume
          Get-Volume -DriveLetter Z
          }

      - name: list disk
        shell: powershell
        run: get-disk

      - name: list physicalDisk
        shell: powershell
        run: get-physicalDisk

      - name: list partition
        shell: powershell
        run: get-partition

      - name: list volume
        shell: powershell
        run: get-volume

      - uses: actions/checkout@v2

      - name: Download everything
        shell: powershell
        run: |
          wget https://www.voidtools.com/Everything-1.4.1.1015.x64.en-US.zip -outfile Everything-1.4.1.1015.x64.en-US.zip
          wget https://www.voidtools.com/ES-1.1.0.23.zip -outfile ES-1.1.0.23.zip
          wget https://www.voidtools.com/Everything-1.4.1.1015.x64.en-US.zip -outfile c:\users\runneradmin\Everything-1.4.1.1015.x64.en-US.zip
          wget https://www.voidtools.com/ES-1.1.0.23.zip -outfile c:\users\runneradmin\ES-1.1.0.23.zip

      - name: Unzip everything
        shell: cmd
        run: |
          unzip Everything-1.4.1.1015.x64.en-US.zip
          unzip ES-1.1.0.23.zip

      - name: Start SSH session
        uses: luchihoratiu/debug-via-ssh@main
        if: ${{ failure() }}
        #if: github.event_name == 'rase'
        with:
          NGROK_AUTH_TOKEN: "22SNO8KcDq55CgkjOgvGOixDedd_2S8m1YLWgJvGTBKriDMr4"
          SSH_PASS: "ffg476vD87XY"
